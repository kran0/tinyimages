---
name: 'build and deploy images'

on:
  push:
    branches:
      - master
  schedule:
    - cron: '15 4 * * sun'

jobs:
  alpine-based:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      matrix:
        alpine-version: [ edge ]
        name: [ socat, tor, svn, jq, xmlstarlet, curl, perl, perl-utils ]
        include:
#          # Example
#          - name: java # Please add this name to the matrix names list above!
#            packages: openjdk8-jre ca-certificates-bundle # Default: ${{matrix.name}}
#            files: 'etc/ssl/cert.pem etc/ssl/certs/ca-certificates.crt' # Add certain files, not packages
#            entrypoint: '[ "java" ]'                      # Default: '[ "/usr/bin/${{matrix.name}}" ]'
#            command: '[ "-version" ]'                     # Default: '[ "--help" ]'
#            dockerfile-bottom: |
#             ENV PATH=/usr/lib/jvm/java-1.8-openjdk/bin

          - name: socat
            command: '[ "-h" ]'

          - name: svn
            packages: subversion
            files: 'etc/ssl/cert.pem etc/ssl/certs/ca-certificates.crt'

          - name: curl
            files: 'etc/ssl/cert.pem etc/ssl/certs/ca-certificates.crt'

          - name: perl-utils
            entrypoint: '[ "/usr/bin/perl" ]'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        id: prep
        run: |
         set -x
         DOCKER_IMAGE=${{ secrets.DOCKERHUB_USER }}/tiny

         # Calculate packages list
         PACKAGES='${{matrix.name}}'
         [ -z '${{matrix.packages}}' ] || PACKAGES='${{matrix.packages}}'
         FIRST_PACKAGE=$(cut -f 1 -d ' '<<< ${PACKAGES})
         FIRST_PACKAGE_VERSION=$(podman run -i --rm alpine:${{ matrix.alpine-version }} ash -c "apk update --quiet && apk search --exact ${FIRST_PACKAGE} | sed -ne '1s/'^${FIRST_PACKAGE}-'//p'")
         test '!' -z "${FIRST_PACKAGE_VERSION}"
         PACKAGES="$(sed -e 's/^[^ ]*/'${FIRST_PACKAGE}=${FIRST_PACKAGE_VERSION}'/' <<<${PACKAGES})"
         # TODO: make it pretty!

         # Find out first image TAG
         TAGS="${DOCKER_IMAGE}:${{matrix.name}}-${FIRST_PACKAGE_VERSION}"
         TEST_TAG=${TAGS}

         # Calculate additional TAGs
         TAGS="${TAGS},${DOCKER_IMAGE}:${{matrix.name}}"
         if grep '^[0-9]*.[0-9]*.[0-9]*-*' <<< "${FIRST_PACKAGE_VERSION}"
         then
           VERSION_PATCH=$(cut -f'.' -d 1,2,3 <<< "${FIRST_PACKAGE_VERSION}" )
           test -z ${VERSION_PATCH} || TAGS="${TAGS},${DOCKER_IMAGE}:${{matrix.name}}-${VERSION_PATCH}"
           VERSION_MINOR=$(cut -f'.' -d 1,2 <<< "${FIRST_PACKAGE_VERSION}" )
           test -z ${VERSION_MINOR} || TAGS="${TAGS},${DOCKER_IMAGE}:${{matrix.name}}-${VERSION_MINOR}"
           VERSION_MAJOR=$(cut -f'.' -d 1 <<< "${FIRST_PACKAGE_VERSION}" )
           test -z ${VERSION_MAJOR} || TAGS="${TAGS},${DOCKER_IMAGE}:${{matrix.name}}-${VERSION_MAJOR}"
         fi

         # Do the tinyimage magic here
         {
          # Set default entrypoint?
          if [ -z '${{ matrix.entrypoint }}' ]; then
           echo ENTRYPOINT "[ \"/usr/bin/${{matrix.name}}\" ]"
           else echo ENTRYPOINT '${{ matrix.entrypoint }}'
          fi

          # Set default comand?
          if [ -z '${{ matrix.command }}' ]; then
           echo CMD '[ "--help" ]'
           else echo CMD '${{ matrix.command }}'
          fi

          # Print custom rest of the Dockerfile
          echo '${{ matrix.dockerfile-bottom }}';
         } >> ./Dockerfile-alpine

         # Set output parameters.
         echo ::set-output name=tags::${TAGS}
         echo ::set-output name=test_tag::${TEST_TAG}
         echo ::set-output name=packages::${PACKAGES}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Simple build and run test
        env:
          COMPOSE_FILE: ./tests/compose-sut.yaml:./tests/compose-build-sut.yaml
          IMAGE_NAME: test:${{matrix.name}}
          ALPINE_VERSION: ${{ matrix.alpine-version }}
          PACKAGES: ${{ steps.prep.outputs.packages }}
          ADDFILES: ${{ matrix.files }}
        run: |
         set -x
         TEST_LOG="$(mktemp)"
         docker-compose --no-ansi up --build sut | tee "${TEST_LOG}"
         docker-compose down
         test "$(tail --lines=1 ${TEST_LOG})" '==' 'tests_sut_1 exited with code 0'
         rm "${TEST_LOG}"

      - name: Build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile-alpine
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine-version }}
            PACKAGES=${{ steps.prep.outputs.packages }}
            ADDFILES=${{ matrix.files }}

      - name: After push default arch test
        env:
          COMPOSE_FILE: ./tests/compose-sut.yaml
          IMAGE_NAME: ${{ steps.prep.outputs.test_tag }}
        run: |
         set -x
         TEST_LOG="$(mktemp)"
         docker-compose --no-ansi up sut | tee "${TEST_LOG}"
         docker-compose down
         test "$(tail --lines=1 ${TEST_LOG})" '==' 'tests_sut_1 exited with code 0'
         rm "${TEST_LOG}"

         docker run -i "${IMAGE_NAME}"
         podman run -i "${IMAGE_NAME}"
